;;; clos-mop-html.el --- Browse documentation from the Meta Object
;;;                      Protocol reference documentation

;;; Commentary:

;; This package makes it convenient to peruse the CLOS MOP reference
;; documentation from within Emacs.  The code was "inspired" by
;; hyperspec.el.
;;
;; It is designed to work with Robert Strandh's CLOS-MOP-HTML project:
;;
;; https://github.com/robert-strandh/CLOS-MOP-HTML

;;; Code:

(require 'cl-lib nil t)
(require 'cl-lib "lib/cl-lib")
(require 'browse-url)
(require 'thingatpt)

(defvar clos-mop-html-root
  "http://metamodular.com/CLOS-MOP/"
  "The root of the CLOS-MOP-HTML URL.
If you have local copy of the repository, set this variable to
something like \"file://usr/local/doc/CLOS-MOP-HTML/\".")

(defvar clos-mop-html-history nil
  "History of symbols looked up in the CLOS-MOP-HTML.")

(defvar clos-mop-html--symbols (make-hash-table :test 'equal)
  "Map a symbol name to its list of relative URLs.")

(defun clos-mop-html--find (name)
  "Get the relative url of a CLOS-MOP symbol NAME."
  (gethash name clos-mop-html--symbols))

(defun clos-mop-html--insert (name relative-url)
  "Insert CLOS-MOP symbol NAME and RELATIVE-URL into master table."
  (cl-pushnew relative-url
              (gethash name clos-mop-html--symbols)
              :test #'equal))

(defun clos-mop-html--strip-mop-package (name)
  (if (string-match "^\\([^:]*\\)::?\\([^:]*\\)$" name)
      (let ((package-name (match-string 1 name))
            (symbol-name (match-string 2 name)))
        (if (member (downcase package-name)
                    '("closer-mop" "c2mop" "sb-mop"))
            symbol-name
          name))
    name))

;; Choose the symbol at point or read symbol-name from the minibuffer.
(defun clos-mop-html-read-symbol-name (&optional symbol-at-point)
  (let* ((symbol-at-point (or symbol-at-point (thing-at-point 'symbol)))
         (stripped-symbol (and symbol-at-point
                               (clos-mop-html--strip-mop-package
                                (downcase symbol-at-point)))))
    (cond ((and stripped-symbol
                (clos-mop-html--find stripped-symbol))
           stripped-symbol)
          (t
           (completing-read "Look up symbol in CLOS-MOP-HTML: "
                            clos-mop-html--symbols nil t
                            stripped-symbol
                            'clos-mop-html-history)))))

(defun clos-mop-html (symbol-name)
  "View the documentation on SYMBOL-NAME from the CLOS-MOP-HTML."
  (interactive (list (clos-mop-html-read-symbol-name)))
  (let ((name (clos-mop-html--strip-mop-package
               (downcase symbol-name))))
    (cl-maplist (lambda (entry)
                  (browse-url (concat clos-mop-html-root (car entry))))
                (or (clos-mop-html--find name)
                    (error "The symbol `%s' is not defined in CLOS-MOP"
                           symbol-name)))))

;; In the following, method entries are commented, because I'm not
;; sure they're very useful, beyond knowledge of their existence.
(mapc (lambda (entry)
        (clos-mop-html--insert (car entry) (cadr entry)))
      '(("accessor-method-slot-definition" "accessor-method-slot-definition.html")
        ;; ("add-dependent-funcallable-standard-class" "add-dependent-funcallable-standard-class.html")
        ("add-dependent" "add-dependent.html")
        ;; ("add-dependent-standard-class" "add-dependent-standard-class.html")
        ;; ("add-dependent-standard-generic-function" "add-dependent-standard-generic-function.html")
        ;; ("add-direct-method-class" "add-direct-method-class.html")
        ;; ("add-direct-method-eql-specializer" "add-direct-method-eql-specializer.html")
        ("add-direct-method" "add-direct-method.html")
        ;; ("add-direct-subclass-class-class" "add-direct-subclass-class-class.html")
        ("add-direct-subclass" "add-direct-subclass.html")
        ("add-method" "add-method.html")
        ;; ("add-method-standard-generic-function-standard-method" "add-method-standard-generic-function-standard-method.html")
        ;; ("allocate-instance-built-in-class" "allocate-instance-built-in-class.html")
        ;; ("allocate-instance-funcallable-standard-class" "allocate-instance-funcallable-standard-class.html")
        ("allocate-instance" "allocate-instance.html")
        ;; ("allocate-instance-standard-class" "allocate-instance-standard-class.html")
        ("built-in-class" "class-built-in-class.html")
        ("class" "class-class.html")
        ;; ("class-default-initargs-built-in-class" "class-default-initargs-built-in-class.html")
        ;; ("class-default-initargs-forward-referenced-class" "class-default-initargs-forward-referenced-class.html")
        ;; ("class-default-initargs-funcallable-standard-class" "class-default-initargs-funcallable-standard-class.html")
        ("class-default-initargs" "class-default-initargs.html")
        ;; ("class-default-initargs-standard-class" "class-default-initargs-standard-class.html")
        ;; ("class-direct-default-initargs-built-in-class" "class-direct-default-initargs-built-in-class.html")
        ;; ("class-direct-default-initargs-forward-referenced-class" "class-direct-default-initargs-forward-referenced-class.html")
        ;; ("class-direct-default-initargs-funcallable-standard-class" "class-direct-default-initargs-funcallable-standard-class.html")
        ("class-direct-default-initargs" "class-direct-default-initargs.html")
        ;; ("class-direct-default-initargs-standard-class" "class-direct-default-initargs-standard-class.html")
        ("direct-slot-definition" "class-direct-slot-definition.html")
        ;; ("class-direct-slots-built-in-class" "class-direct-slots-built-in-class.html")
        ;; ("class-direct-slots-forward-referenced-class" "class-direct-slots-forward-referenced-class.html")
        ;; ("class-direct-slots-funcallable-standard-class" "class-direct-slots-funcallable-standard-class.html")
        ("class-direct-slots" "class-direct-slots.html")
        ;; ("class-direct-slots-standard-class" "class-direct-slots-standard-class.html")
        ;; ("class-direct-subclasses-built-in-class" "class-direct-subclasses-built-in-class.html")
        ;; ("class-direct-subclasses-forward-referenced-class" "class-direct-subclasses-forward-referenced-class.html")
        ;; ("class-direct-subclasses-funcallable-standard-class" "class-direct-subclasses-funcallable-standard-class.html")
        ("class-direct-subclasses" "class-direct-subclasses.html")
        ;; ("class-direct-subclasses-standard-class" "class-direct-subclasses-standard-class.html")
        ;; ("class-direct-superclasses-built-in-class" "class-direct-superclasses-built-in-class.html")
        ;; ("class-direct-superclasses-forward-referenced-class" "class-direct-superclasses-forward-referenced-class.html")
        ;; ("class-direct-superclasses-funcallable-standard-class" "class-direct-superclasses-funcallable-standard-class.html")
        ("class-direct-superclasses" "class-direct-superclasses.html")
        ;; ("class-direct-superclasses-standard-class" "class-direct-superclasses-standard-class.html")
        ("effective-slot-definition" "class-effective-slot-definition.html")
        ("eql-specializer" "class-eql-specializer.html")
        ;; ("class-finalized-p-built-in-class" "class-finalized-p-built-in-class.html")
        ;; ("class-finalized-p-forward-referenced-class" "class-finalized-p-forward-referenced-class.html")
        ;; ("class-finalized-p-funcallable-standard-class" "class-finalized-p-funcallable-standard-class.html")
        ("class-finalized-p" "class-finalized-p.html")
        ;; ("class-finalized-p-standard-class" "class-finalized-p-standard-class.html")
        ("forward-referenced-class" "class-forward-referenced-class.html")
        ("funcallable-standard-class" "class-funcallable-standard-class.html")
        ("funcallable-standard-object" "class-funcallable-standard-object.html")
        ("function" "class-function.html")
        ("generic-function" "class-generic-function.html")
        ("metaobject" "class-metaobject.html")
        ("method-combination" "class-method-combination.html")
        ("method" "class-method.html")
        ;; ("class-name-built-in-class" "class-name-built-in-class.html")
        ;; ("class-name-forward-referenced-class" "class-name-forward-referenced-class.html")
        ;; ("class-name-funcallable-standard-class" "class-name-funcallable-standard-class.html")
        ("class-name" "class-name.html")
        ;; ("class-name-standard-class" "class-name-standard-class.html")
        ;; ("class-precedence-list-built-in-class" "class-precedence-list-built-in-class.html")
        ;; ("class-precedence-list-forward-referenced-class" "class-precedence-list-forward-referenced-class.html")
        ;; ("class-precedence-list-funcallable-standard-class" "class-precedence-list-funcallable-standard-class.html")
        ("class-precedence-list" "class-precedence-list.html")
        ;; ("class-precedence-list-standard-class" "class-precedence-list-standard-class.html")
        ;; ("class-prototype-built-in-class" "class-prototype-built-in-class.html")
        ;; ("class-prototype-forward-referenced-class" "class-prototype-forward-referenced-class.html")
        ;; ("class-prototype-funcallable-standard-class" "class-prototype-funcallable-standard-class.html")
        ("class-prototype" "class-prototype.html")
        ;; ("class-prototype-standard-class" "class-prototype-standard-class.html")
        ("slot-definition" "class-slot-definition.html")
        ;; ("class-slots-built-in-class" "class-slots-built-in-class.html")
        ;; ("class-slots-forward-referenced-class" "class-slots-forward-referenced-class.html")
        ;; ("class-slots-funcallable-standard-class" "class-slots-funcallable-standard-class.html")
        ("class-slots" "class-slots.html")
        ;; ("class-slots-standard-class" "class-slots-standard-class.html")
        ("specializer" "class-specializer.html")
        ("standard-accessor-method" "class-standard-accessor-method.html")
        ("standard-class" "class-standard-class.html")
        ("standard-direct-slot-definition" "class-standard-direct-slot-definition.html")
        ("standard-effective-slot-definition" "class-standard-effective-slot-definition.html")
        ("standard-generic-function" "class-standard-generic-function.html")
        ("standard-method" "class-standard-method.html")
        ("standard-object" "class-standard-object.html")
        ("standard-reader-method" "class-standard-reader-method.html")
        ("standard-slot-definition" "class-standard-slot-definition.html")
        ("standard-writer-method" "class-standard-writer-method.html")
        ("t" "class-t.html")
        ("compute-applicable-methods" "compute-applicable-methods.html")
        ;; ("compute-applicable-methods-standard-generic-function" "compute-applicable-methods-standard-generic-function.html")
        ;; ("compute-applicable-methods-using-classes" "compute-applicable-methods-using-classes.html")
        ;; ("compute-applicable-methods-using-classes-standard-generic-function" "compute-applicable-methods-using-classes-standard-generic-function.html")
        ;; ("compute-class-precedence-list-class" "compute-class-precedence-list-class.html")
        ("compute-class-precedence-list" "compute-class-precedence-list.html")
        ;; ("compute-default-initargs-funcallable-standard-class" "compute-default-initargs-funcallable-standard-class.html")
        ("compute-default-initargs" "compute-default-initargs.html")
        ;; ("compute-default-initargs-standard-class" "compute-default-initargs-standard-class.html")
        ("compute-discriminating-function" "compute-discriminating-function.html")
        ;; ("compute-discriminating-function-standard-generic-function" "compute-discriminating-function-standard-generic-function.html")
        ("compute-effective-method" "compute-effective-method.html")
        ;; ("compute-effective-method-standard-generic-function" "compute-effective-method-standard-generic-function.html")
        ;; ("compute-effective-slot-definition-funcallable-standard-class" "compute-effective-slot-definition-funcallable-standard-class.html")
        ("compute-effective-slot-definition" "compute-effective-slot-definition.html")
        ;; ("compute-effective-slot-definition-standard-class" "compute-effective-slot-definition-standard-class.html")
        ;; ("compute-slots-around-funcallable-standard-class" "compute-slots-around-funcallable-standard-class.html")
        ;; ("compute-slots-around-standard-class" "compute-slots-around-standard-class.html")
        ;; ("compute-slots-funcallable-standard-class" "compute-slots-funcallable-standard-class.html")
        ("compute-slots" "compute-slots.html")
        ;; ("compute-slots-standard-class" "compute-slots-standard-class.html")
        ;; ("direct-slot-definition-class-funcallable-standard-class" "direct-slot-definition-class-funcallable-standard-class.html")
        ("direct-slot-definition-class" "direct-slot-definition-class.html")
        ;; ("direct-slot-definition-class-standard-class" "direct-slot-definition-class-standard-class.html")
        ;; ("effective-slot-definition-class-funcallable-standard-class" "effective-slot-definition-class-funcallable-standard-class.html")
        ("effective-slot-definition-class" "effective-slot-definition-class.html")
        ;; ("effective-slot-definition-class-standard-class" "effective-slot-definition-class-standard-class.html")
        ("ensure-class" "ensure-class.html")
        ;; ("ensure-class-using-class-class" "ensure-class-using-class-class.html")
        ;; ("ensure-class-using-class-forward-referenced-class" "ensure-class-using-class-forward-referenced-class.html")
        ("ensure-class-using-class" "ensure-class-using-class.html")
        ;; ("ensure-class-using-class-null" "ensure-class-using-class-null.html")
        ("ensure-generic-function" "ensure-generic-function.html")
        ;; ("ensure-generic-function-using-class-generic-function" "ensure-generic-function-using-class-generic-function.html")
        ("ensure-generic-function-using-class" "ensure-generic-function-using-class.html")
        ;; ("ensure-generic-function-using-class-null" "ensure-generic-function-using-class-null.html")
        ("eql-specializer-object" "eql-specializer-object.html")
        ("extract-lambda-list" "extract-lambda-list.html")
        ("extract-specializer-names" "extract-specializer-names.html")
        ;; ("finalize-inheritance-forward-referenced-class" "finalize-inheritance-forward-referenced-class.html")
        ;; ("finalize-inheritance-funcallable-standard-class" "finalize-inheritance-funcallable-standard-class.html")
        ("finalize-inheritance" "finalize-inheritance.html")
        ;; ("finalize-inheritance-standard-class" "finalize-inheritance-standard-class.html")
        ("find-method-combination" "find-method-combination.html")
        ("funcallable-instances" "funcallable-instances.html")
        ("funcallable-standard-instance-access" "funcallable-standard-instance-access.html")
        ("generic-function-argument-precedence-order" "generic-function-argument-precedence-order.html")
        ;; ("generic-function-argument-precedence-order-standard-generic-function" "generic-function-argument-precedence-order-standard-generic-function.html")
        ("generic-function-declarations" "generic-function-declarations.html")
        ;; ("generic-function-declarations-standard-generic-function" "generic-function-declarations-standard-generic-function.html")
        ("generic-function-lambda-list" "generic-function-lambda-list.html")
        ;; ("generic-function-lambda-list-standard-generic-function" "generic-function-lambda-list-standard-generic-function.html")
        ("generic-function-method-class" "generic-function-method-class.html")
        ;; ("generic-function-method-class-standard-generic-function" "generic-function-method-class-standard-generic-function.html")
        ("generic-function-method-combination" "generic-function-method-combination.html")
        ;; ("generic-function-method-combination-standard-generic-function" "generic-function-method-combination-standard-generic-function.html")
        ("generic-function-methods" "generic-function-methods.html")
        ;; ("generic-function-methods-standard-generic-function" "generic-function-methods-standard-generic-function.html")
        ("generic-function-name" "generic-function-name.html")
        ;; ("generic-function-name-standard-generic-function" "generic-function-name-standard-generic-function.html")
        ("intern-eql-specializer" "intern-eql-specializer.html")
        ;; ("make-instance-funcallable-standard-class" "make-instance-funcallable-standard-class.html")
        ("make-instance" "make-instance.html")
        ;; ("make-instance-standard-class" "make-instance-standard-class.html")
        ;; ("make-instance-symbol" "make-instance-symbol.html")
        ("make-method-lambda" "make-method-lambda.html")
        ;; ("make-method-lambda-standard-generic-function-standard-method" "make-method-lambda-standard-generic-function-standard-method.html")
        ;; ("map-dependents-funcallable-standard-class" "map-dependents-funcallable-standard-class.html")
        ("map-dependents" "map-dependents.html")
        ;; ("map-dependents-standard-class" "map-dependents-standard-class.html")
        ;; ("map-dependents-standard-generic-function" "map-dependents-standard-generic-function.html")
        ("method-function" "method-function.html")
        ;; ("method-function-standard-method" "method-function-standard-method.html")
        ("method-generic-function" "method-generic-function.html")
        ;; ("method-generic-function-standard-method" "method-generic-function-standard-method.html")
        ("method-lambda-list" "method-lambda-list.html")
        ;; ("method-lambda-list-standard-method" "method-lambda-list-standard-method.html")
        ("method-qualifiers" "method-qualifiers.html")
        ;; ("method-qualifiers-standard-method" "method-qualifiers-standard-method.html")
        ("method-specializers" "method-specializers.html")
        ;; ("method-specializers-standard-method" "method-specializers-standard-method.html")
        ;; ("reader-method-class-funcallable-standard-class-standard-direct-slot-definition" "reader-method-class-funcallable-standard-class-standard-direct-slot-definition.html")
        ("reader-method-class" "reader-method-class.html")
        ;; ("reader-method-class-standard-class-standard-direct-slot-definition" "reader-method-class-standard-class-standard-direct-slot-definition.html")
        ;; ("remove-dependent-funcallable-standard-class" "remove-dependent-funcallable-standard-class.html")
        ("remove-dependent" "remove-dependent.html")
        ;; ("remove-dependent-standard-class" "remove-dependent-standard-class.html")
        ;; ("remove-dependent-standard-generic-function" "remove-dependent-standard-generic-function.html")
        ;; ("remove-direct-method-class" "remove-direct-method-class.html")
        ;; ("remove-direct-method-eql-specializer" "remove-direct-method-eql-specializer.html")
        ("remove-direct-method" "remove-direct-method.html")
        ;; ("remove-direct-subclass-class-class" "remove-direct-subclass-class-class.html")
        ("remove-direct-subclass" "remove-direct-subclass.html")
        ("remove-method" "remove-method.html")
        ;; ("remove-method-standard-generic-function-standard-method" "remove-method-standard-generic-function-standard-method.html")
        ("setf-class-name" "setf-class-name.html")
        ("setf-generic-function-name" "setf-generic-function-name.html")
        ;; ("setf-slot-value-using-class-built-in-class" "setf-slot-value-using-class-built-in-class.html")
        ;; ("setf-slot-value-using-class-funcallable-standard-class-standard-effective-slot-definition" "setf-slot-value-using-class-funcallable-standard-class-standard-effective-slot-definition.html")
        ("setf-slot-value-using-class" "setf-slot-value-using-class.html")
        ;; ("setf-slot-value-using-class-standard-class-standard-effective-slot-definition" "setf-slot-value-using-class-standard-class-standard-effective-slot-definition.html")
        ("set-funcallable-instance-function" "set-funcallable-instance-function.html")
        ;; ("slot-boundp-using-class-built-in-class" "slot-boundp-using-class-built-in-class.html")
        ;; ("slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition" "slot-boundp-using-class-funcallable-standard-class-standard-effective-slot-definition.html")
        ("slot-boundp-using-class" "slot-boundp-using-class.html")
        ;; ("slot-boundp-using-class-standard-class-standard-effective-slot-definition" "slot-boundp-using-class-standard-class-standard-effective-slot-definition.html")
        ("slot-definition-allocation" "slot-definition-allocation.html")
        ;; ("slot-definition-allocation-standard-slot-definition" "slot-definition-allocation-standard-slot-definition.html")
        ("slot-definition-initargs" "slot-definition-initargs.html")
        ;; ("slot-definition-initargs-standard-slot-definition" "slot-definition-initargs-standard-slot-definition.html")
        ("slot-definition-initform" "slot-definition-initform.html")
        ;; ("slot-definition-initform-standard-slot-definition" "slot-definition-initform-standard-slot-definition.html")
        ("slot-definition-initfunction" "slot-definition-initfunction.html")
        ;; ("slot-definition-initfunction-standard-slot-definition" "slot-definition-initfunction-standard-slot-definition.html")
        ("slot-definition-location" "slot-definition-location.html")
        ;; ("slot-definition-location-standard-effective-slot-definition" "slot-definition-location-standard-effective-slot-definition.html")
        ("slot-definition-name" "slot-definition-name.html")
        ;; ("slot-definition-name-standard-slot-definition" "slot-definition-name-standard-slot-definition.html")
        ("slot-definition-readers" "slot-definition-readers.html")
        ;; ("slot-definition-readers-standard-direct-slot-definition" "slot-definition-readers-standard-direct-slot-definition.html")
        ("slot-definitions" "slot-definitions.html")
        ("slot-definition-type" "slot-definition-type.html")
        ;; ("slot-definition-type-standard-slot-definition" "slot-definition-type-standard-slot-definition.html")
        ("slot-definition-writers" "slot-definition-writers.html")
        ;; ("slot-definition-writers-standard-direct-slot-definition" "slot-definition-writers-standard-direct-slot-definition.html")
        ;; ("slot-makunbound-using-class-built-in-class" "slot-makunbound-using-class-built-in-class.html")
        ;; ("slot-makunbound-using-class-funcallable-standard-class-standard-effective-slot-definition" "slot-makunbound-using-class-funcallable-standard-class-standard-effective-slot-definition.html")
        ("slot-makunbound-using-class" "slot-makunbound-using-class.html")
        ;; ("slot-makunbound-using-class-standard-class-standard-effective-slot-definition" "slot-makunbound-using-class-standard-class-standard-effective-slot-definition.html")
        ;; ("slot-value-using-class-built-in-class" "slot-value-using-class-built-in-class.html")
        ;; ("slot-value-using-class-funcallable-standard-class-standard-effective-slot-definition" "slot-value-using-class-funcallable-standard-class-standard-effective-slot-definition.html")
        ("slot-value-using-class" "slot-value-using-class.html")
        ;; ("slot-value-using-class-standard-class-standard-effective-slot-definition" "slot-value-using-class-standard-class-standard-effective-slot-definition.html")
        ;; ("specializer-direct-generic-functions-class" "specializer-direct-generic-functions-class.html")
        ;; ("specializer-direct-generic-functions-eql-specializer" "specializer-direct-generic-functions-eql-specializer.html")
        ("specializer-direct-generic-functions" "specializer-direct-generic-functions.html")
        ;; ("specializer-direct-methods-class" "specializer-direct-methods-class.html")
        ;; ("specializer-direct-methods-eql-specializer" "specializer-direct-methods-eql-specializer.html")
        ("specializer-direct-methods" "specializer-direct-methods.html")
        ("standard-instance-access" "standard-instance-access.html")
        ("defclass" "the-defclass-macro.html")
        ("defgeneric" "the-defgeneric-macro.html")
        ("defmethod" "the-defmethod-macro.html")
        ("update-dependent" "update-dependent.html")
        ;; ("validate-superclass-class-class" "validate-superclass-class-class.html")
        ("validate-superclass" "validate-superclass.html")
        ;; ("writer-method-class-funcallable-standard-class-standard-direct-slot-definition" "writer-method-class-funcallable-standard-class-standard-direct-slot-definition.html")
        ("writer-method-class" "writer-method-class.html")
        ;; ("writer-method-class-standard-class-standard-direct-slot-definition" "writer-method-class-standard-class-standard-direct-slot-definition.html")
        ))

(provide 'clos-mop-html)
